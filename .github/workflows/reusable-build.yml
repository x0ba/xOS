name: Reusable Build and Push
on:
  workflow_call:
    inputs:
      images:
        description: "JSON string of images to build, eg '[bluefin, bluefin-dx, bazzite]'"
        required: true
        type: string
      streams:
        description: "JSON string of streams to build, one or all of '[stable, beta, testing]'"
        required: true
        type: string
      flavors:
        description: "JSON string of flavors to build, one or both of '[main, nvidia]'"
        required: true
        type: string
    outputs:
      images:
        description: "An array of images built and pushed to the registry"
        value: ${{ jobs.check.outputs.images }}

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_STYLED: xOS

jobs:
  build-image:
    name: Build Images
    runs-on: ubuntu-24.04
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(inputs.images) }}
        stream: ${{ fromJson(inputs.streams) }}
        flavor: ${{ fromJson(inputs.flavors) }}
        exclude:
          - image: bazzite
            stream: beta
          - image: bazzite-deck
            stream: beta
          - image: bazzite
            stream: testing
          - image: bazzite-deck
            stream: testing
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ matrix.image }}-${{ matrix.flavor }}-${{ matrix.stream }}
      cancel-in-progress: true
    steps:
      - name: Checkout Push to Registry Action
        uses: actions/checkout@v4

      - name: Setup Just
        id: setup_just
        shell: bash
        run: |
          set -eoux pipefail
          JUST_VERSION=$(curl -L https://api.github.com/repos/casey/just/releases/latest | jq -r '.tag_name')
          curl -sSLO https://github.com/casey/just/releases/download/${JUST_VERSION}/just-${JUST_VERSION}-x86_64-unknown-linux-musl.tar.gz
          sudo tar -zxvf just-${JUST_VERSION}-x86_64-unknown-linux-musl.tar.gz -C /usr/local/bin just
          rm -f just-${JUST_VERSION}-x86_64-unknown-linux-musl.tar.gz

          cd /usr/bin && \
              sudo curl -sSLO \
                  https://github.com/casey/just/releases/download/1.36.0/just-1.36.0-x86_64-unknown-linux-musl.tar.gz && \
              sudo tar -zxvf just-1.36.0-x86_64-unknown-linux-musl.tar.gz just && \
              sudo rm -f just-1.36.0-x86_64-unknown-linux-musl.tar.gz

      - name: Get Source Image Info
        id: source_info
        shell: bash
        run: |
          build_src_dst=($(just gen-build-src-dst "${{ matrix.image }}" "${{ matrix.stream }}" "${{ matrix.flavor }}"))
          source_image=${build_src_dst[0]}
          source_tag=${build_src_dst[1]}
          dest_image=${build_src_dst[2]}
          dest_tag=${build_src_dst[3]}

          echo "source_image=${source_image}" >> "$GITHUB_ENV"
          echo "source_tag=${source_tag}" >> "$GITHUB_ENV"
          echo "dest_image=${dest_image}" >> "$GITHUB_ENV"
          echo "dest_tag=${dest_tag}" >> "$GITHUB_ENV"

      - name: Generate Tags
        id: generate_tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          tag=${{ env.dest_tag }}

          BUILD_TAGS+=("${tag}" "${tag}-${TIMESTAMP}")
          for TAG in "${BUILD_TAGS[@]}"; do
            echo "${TAG}"
          done

          echo "alias_tags=${BUILD_TAGS[*]}" >> "$GITHUB_OUTPUT"

      - name: Verify Source Image
        uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
        with:
          containers: ${{ env.source_image }}:${{ env.source_tag }}

      - name: Maximize Build Space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Pull Images
        uses: Wandalen/wretry.action@v3.7.3
        id: pull
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eoux pipefail
            sudo podman pull ghcr.io/ublue-os/${{ env.source_image }}:${{ env.source_tag }}

      - name: Build Image
        id: build_image
        shell: bash
        run: |
          sudo just build "${{ matrix.image }}" "${{ matrix.stream }}" "${{ matrix.flavor }}"

      - name: Rechunk Image
        id: rechunk
        shell: bash
        run: |
          sudo just rechunk "${{ matrix.image }}" "${{ matrix.stream }}" "${{ matrix.flavor }}"

      - name: Tag Images
        shell: bash
        run: |
          set -eoux pipefail
          sudo podman images
          IMAGE="localhost/${{ env.dest_image }}:${{ env.dest_tag }}"
          for tag in ${{ steps.generate_tags.outputs.alias_tags }}; do
            sudo podman tag $IMAGE ${{ env.dest_image }}:$tag
          done
          sudo podman tag $IMAGE rechunked-img
          sudo podman images

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push to GHCR
        id: push
        if: github.event_name != 'pull_request'
        uses: Wandalen/wretry.action@v3.7.3
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -euox pipefail

            for tag in ${{ steps.generate_tags.outputs.alias_tags }}; do
              sudo podman push ${{ env.dest_image }}:${tag} ${{ steps.registry_case.outputs.lowercase }}/${{ env.dest_image }}:${tag}
            done
            digest=$(sudo skopeo inspect docker://${{ steps.registry_case.outputs.lowercase }}/${{ env.dest_image }}:${{ env.dest_tag }} --format '{{.Digest}}')
            echo "digest=${digest}" >> $GITHUB_OUTPUT

      - uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign Container Image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.dest_image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo Outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
